proxy:
  # root of the config file must always be `proxy`
  defaultRoute: default # indicate default route of frontend nodes
  frontend:
    # .DESC define frontend endpoints (those that accept clients)
    # .TYPE OBJECT
    # .SCHEMA: <name> FRONTEND
    #   FRONTEND SCHEMA:
    #    `address`   STRING REQUIRED address that this server should listen on it
    #       FORMAT: <protocol>[://[host][:port][/path]]
    #       NOTE:   Path component is only valid for ws/wss protocols
    #    `tls`       OBJECT OPTIONAL if this is a secure protocol(wss, mqtts), then this field is required
    #       and configure TLS options for this endpoint
    #       SCHEMA:
    #         `certificates`      ARRAY[CERTIFICATE] REQUIRED an array of certificate objects
    #           ITEM SCHEMA:
    #             `cert`         STRING REQUIRED path to the certificate file
    #             `key`          STRING REQUIRED path to the private key file for the certificate
    #         `clientValidation`  OBJECT OPTIONAL configure client certificate validation
    #           SCHEMA:
    #             `enabled`      BOOL=true is client validation enabled?
    #             `caFiles`      ARRAY[STRING] OPTIONAL an array of PEM certificate list, that will be
    #                            used as CA for purpose of validation of client certificate
    #     `route`    STRING OPTIONAL route of this endpoint to the backend servers
    #     `enabled`  BOOL=true is this frontend enabled?
    #       NOTE: disabled servers must still be valid
    ws-frontend:
      address: ws   # will be parsed as ws://
    mqtts-frontend:
      address: "mqtts://:8080"
      tls:
        certificates:
            - cert: ./data/cert.pem
              key: ./data/key.pem
        clientValidation:
            required: true
            caFiles:
                - ./data/cacert.pem
    #invalid-server-have-no-address:
    #invalid-server-no-tls-on-secure-endpoint:
    #  address: wss
  backend:
    # .DESC define backend endpoints(those that have a MQTT broker)
    # .TYPE OBJECT
    # .SCHEMA: <name> BACKEND
    #   BACKEND SCHEMA:
    #    `address`   STRING REQUIRED address that this server should listen on it
    #       FORMAT: <protocol>://host[:port][/path]
    #       NOTE:   Path component is only valid for ws/wss protocols
    #    `certificate`  TLS_CONFIG OPTIONAL configure TLS options for this endpoint
    #       SCHEMA:
    #         `cert` REQUIRED path to the certificate file
    #         `key`  REQUIRED path to the private key file for the certificate
    #     `enabled`   BOOL=true is this backend enabled?
    #       NOTE: disabled servers must still be valid
    #     `weight`  INT=1 weight of this server
    mqtt-01:
      address: mqtt://172.16.76.1
    mqtt-02:
      address: mqtts://172.16.76.2
    mqtt-03:
      address: mqtts://172.16.76.3
    mqtt-04:
      address: mqtts://172.16.76.4
      enabled: false
    mqtt-ws-01:
      address: ws://172.16.77.1/mqtt
    mqtt-ws-02:
      address: wss://172.16.77.2
    mqtt-ws-03:
      address: wss://172.16.77.3
      enabled: false
  backendGroups:
    # .TYPE DESC define sets of background endpoints, so you may use them in the routes
    # .TYPE OBJECT
    # .SCHEMA:
    #   <group-name>  ARRAY[BACKEND_ENDPOINT_REF]
    #     ITEM SCHEMA:
    #       `name`    STRING REQUIRED name of the backend endpoint
    #       `weight`  INT OPTIONAL weight of endpoint in this group, default value is weight of
    #                 the endpoint itself
    # NOTES:
    # - Application always following groups, if you have not defined them
    #   all:    contains list of all defined backend endpoints
    #   mqtt:   contains list of all backend endpoints that work with MQTT protocol
    #   mqtts:  contains list of all backend endpoints that work with MQTTS protocol
    #   mqtt-*: contains list of all backend endpoints that work with MQTT/MQTTS protocol
    #   ws:     contains list of all backend endpoints that work with WS protocol
    #   wss:    contains list of all backend endpoints that work with WSS protocol
    #   ws-*:   contains list of all backend endpoints that work with WS/WSS protocol
    app1:
      - name: mqtt-01
        weight: 2
      - name: mqtt-ws-01
  routes:
    # .DESC define what backends must be used for what frontend servers
    # .TYPE OBJECT
    # .SCHEMA
    #   <ROUTE_NAME>  ARRAY[ROUTE_DEFINITION]
    #     ITEM SCHEMA:
    #       `clientAddr`  STRING REQUIRED
    #           Address of the clients, this may be an address or a network mask
    #       `backend` STRING OPTIONAL
    #           backend server that clients will be proxied to it
    #       `backendGroup` STRING OPTIONAL
    #           backend group that clients will be proxied to it
    default:
      - clientAddr: 172.16.0.0/16
        backendGroup: ws
      - clientAddr: 172.17.0.0/16
        backendGroup: app1
      - clientAddr: 0.0.0.0/0
        backend: mqtt-01